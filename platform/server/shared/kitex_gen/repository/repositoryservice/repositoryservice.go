// Code generated by Kitex v0.6.1. DO NOT EDIT.

package repositoryservice

import (
	"context"
	repository "github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/repository"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return repositoryServiceServiceInfo
}

var repositoryServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RepositoryService"
	handlerType := (*repository.RepositoryService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddRepository":    kitex.NewMethodInfo(addRepositoryHandler, newRepositoryServiceAddRepositoryArgs, newRepositoryServiceAddRepositoryResult, false),
		"DeleteRepository": kitex.NewMethodInfo(deleteRepositoryHandler, newRepositoryServiceDeleteRepositoryArgs, newRepositoryServiceDeleteRepositoryResult, false),
		"UpdateRepository": kitex.NewMethodInfo(updateRepositoryHandler, newRepositoryServiceUpdateRepositoryArgs, newRepositoryServiceUpdateRepositoryResult, false),
		"GetRepositories":  kitex.NewMethodInfo(getRepositoriesHandler, newRepositoryServiceGetRepositoriesArgs, newRepositoryServiceGetRepositoriesResult, false),
		"SyncRepository":   kitex.NewMethodInfo(syncRepositoryHandler, newRepositoryServiceSyncRepositoryArgs, newRepositoryServiceSyncRepositoryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "repository",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func addRepositoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*repository.RepositoryServiceAddRepositoryArgs)
	realResult := result.(*repository.RepositoryServiceAddRepositoryResult)
	success, err := handler.(repository.RepositoryService).AddRepository(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRepositoryServiceAddRepositoryArgs() interface{} {
	return repository.NewRepositoryServiceAddRepositoryArgs()
}

func newRepositoryServiceAddRepositoryResult() interface{} {
	return repository.NewRepositoryServiceAddRepositoryResult()
}

func deleteRepositoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*repository.RepositoryServiceDeleteRepositoryArgs)
	realResult := result.(*repository.RepositoryServiceDeleteRepositoryResult)
	success, err := handler.(repository.RepositoryService).DeleteRepository(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRepositoryServiceDeleteRepositoryArgs() interface{} {
	return repository.NewRepositoryServiceDeleteRepositoryArgs()
}

func newRepositoryServiceDeleteRepositoryResult() interface{} {
	return repository.NewRepositoryServiceDeleteRepositoryResult()
}

func updateRepositoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*repository.RepositoryServiceUpdateRepositoryArgs)
	realResult := result.(*repository.RepositoryServiceUpdateRepositoryResult)
	success, err := handler.(repository.RepositoryService).UpdateRepository(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRepositoryServiceUpdateRepositoryArgs() interface{} {
	return repository.NewRepositoryServiceUpdateRepositoryArgs()
}

func newRepositoryServiceUpdateRepositoryResult() interface{} {
	return repository.NewRepositoryServiceUpdateRepositoryResult()
}

func getRepositoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*repository.RepositoryServiceGetRepositoriesArgs)
	realResult := result.(*repository.RepositoryServiceGetRepositoriesResult)
	success, err := handler.(repository.RepositoryService).GetRepositories(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRepositoryServiceGetRepositoriesArgs() interface{} {
	return repository.NewRepositoryServiceGetRepositoriesArgs()
}

func newRepositoryServiceGetRepositoriesResult() interface{} {
	return repository.NewRepositoryServiceGetRepositoriesResult()
}

func syncRepositoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*repository.RepositoryServiceSyncRepositoryArgs)
	realResult := result.(*repository.RepositoryServiceSyncRepositoryResult)
	success, err := handler.(repository.RepositoryService).SyncRepository(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRepositoryServiceSyncRepositoryArgs() interface{} {
	return repository.NewRepositoryServiceSyncRepositoryArgs()
}

func newRepositoryServiceSyncRepositoryResult() interface{} {
	return repository.NewRepositoryServiceSyncRepositoryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddRepository(ctx context.Context, req *repository.AddRepositoryReq) (r *repository.AddRepositoryRes, err error) {
	var _args repository.RepositoryServiceAddRepositoryArgs
	_args.Req = req
	var _result repository.RepositoryServiceAddRepositoryResult
	if err = p.c.Call(ctx, "AddRepository", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRepository(ctx context.Context, req *repository.DeleteRepositoriesReq) (r *repository.DeleteRepositoriesRes, err error) {
	var _args repository.RepositoryServiceDeleteRepositoryArgs
	_args.Req = req
	var _result repository.RepositoryServiceDeleteRepositoryResult
	if err = p.c.Call(ctx, "DeleteRepository", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRepository(ctx context.Context, req *repository.UpdateRepositoryReq) (r *repository.UpdateRepositoryRes, err error) {
	var _args repository.RepositoryServiceUpdateRepositoryArgs
	_args.Req = req
	var _result repository.RepositoryServiceUpdateRepositoryResult
	if err = p.c.Call(ctx, "UpdateRepository", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRepositories(ctx context.Context, req *repository.GetRepositoriesReq) (r *repository.GetRepositoriesRes, err error) {
	var _args repository.RepositoryServiceGetRepositoriesArgs
	_args.Req = req
	var _result repository.RepositoryServiceGetRepositoriesResult
	if err = p.c.Call(ctx, "GetRepositories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncRepository(ctx context.Context, req *repository.SyncRepositoryByIdReq) (r *repository.SyncRepositoryByIdRes, err error) {
	var _args repository.RepositoryServiceSyncRepositoryArgs
	_args.Req = req
	var _result repository.RepositoryServiceSyncRepositoryResult
	if err = p.c.Call(ctx, "SyncRepository", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
