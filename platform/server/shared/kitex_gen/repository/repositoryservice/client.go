// Code generated by Kitex v0.6.1. DO NOT EDIT.

package repositoryservice

import (
	"context"
	repository "github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/repository"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddRepository(ctx context.Context, req *repository.AddRepositoryReq, callOptions ...callopt.Option) (r *repository.AddRepositoryRes, err error)
	DeleteRepository(ctx context.Context, req *repository.DeleteRepositoriesReq, callOptions ...callopt.Option) (r *repository.DeleteRepositoriesRes, err error)
	UpdateRepository(ctx context.Context, req *repository.UpdateRepositoryReq, callOptions ...callopt.Option) (r *repository.UpdateRepositoryRes, err error)
	GetRepositories(ctx context.Context, req *repository.GetRepositoriesReq, callOptions ...callopt.Option) (r *repository.GetRepositoriesRes, err error)
	SyncRepository(ctx context.Context, req *repository.SyncRepositoryByIdReq, callOptions ...callopt.Option) (r *repository.SyncRepositoryByIdRes, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRepositoryServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRepositoryServiceClient struct {
	*kClient
}

func (p *kRepositoryServiceClient) AddRepository(ctx context.Context, req *repository.AddRepositoryReq, callOptions ...callopt.Option) (r *repository.AddRepositoryRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddRepository(ctx, req)
}

func (p *kRepositoryServiceClient) DeleteRepository(ctx context.Context, req *repository.DeleteRepositoriesReq, callOptions ...callopt.Option) (r *repository.DeleteRepositoriesRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteRepository(ctx, req)
}

func (p *kRepositoryServiceClient) UpdateRepository(ctx context.Context, req *repository.UpdateRepositoryReq, callOptions ...callopt.Option) (r *repository.UpdateRepositoryRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateRepository(ctx, req)
}

func (p *kRepositoryServiceClient) GetRepositories(ctx context.Context, req *repository.GetRepositoriesReq, callOptions ...callopt.Option) (r *repository.GetRepositoriesRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRepositories(ctx, req)
}

func (p *kRepositoryServiceClient) SyncRepository(ctx context.Context, req *repository.SyncRepositoryByIdReq, callOptions ...callopt.Option) (r *repository.SyncRepositoryByIdRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SyncRepository(ctx, req)
}
