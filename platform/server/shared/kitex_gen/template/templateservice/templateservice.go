// Code generated by Kitex v0.6.1. DO NOT EDIT.

package templateservice

import (
	"context"
	template "github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/template"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return templateServiceServiceInfo
}

var templateServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TemplateService"
	handlerType := (*template.TemplateService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddTemplate":        kitex.NewMethodInfo(addTemplateHandler, newTemplateServiceAddTemplateArgs, newTemplateServiceAddTemplateResult, false),
		"DeleteTemplate":     kitex.NewMethodInfo(deleteTemplateHandler, newTemplateServiceDeleteTemplateArgs, newTemplateServiceDeleteTemplateResult, false),
		"UpdateTemplate":     kitex.NewMethodInfo(updateTemplateHandler, newTemplateServiceUpdateTemplateArgs, newTemplateServiceUpdateTemplateResult, false),
		"GetTemplates":       kitex.NewMethodInfo(getTemplatesHandler, newTemplateServiceGetTemplatesArgs, newTemplateServiceGetTemplatesResult, false),
		"AddTemplateItem":    kitex.NewMethodInfo(addTemplateItemHandler, newTemplateServiceAddTemplateItemArgs, newTemplateServiceAddTemplateItemResult, false),
		"DeleteTemplateItem": kitex.NewMethodInfo(deleteTemplateItemHandler, newTemplateServiceDeleteTemplateItemArgs, newTemplateServiceDeleteTemplateItemResult, false),
		"UpdateTemplateItem": kitex.NewMethodInfo(updateTemplateItemHandler, newTemplateServiceUpdateTemplateItemArgs, newTemplateServiceUpdateTemplateItemResult, false),
		"GetTemplateItems":   kitex.NewMethodInfo(getTemplateItemsHandler, newTemplateServiceGetTemplateItemsArgs, newTemplateServiceGetTemplateItemsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "template",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func addTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServiceAddTemplateArgs)
	realResult := result.(*template.TemplateServiceAddTemplateResult)
	success, err := handler.(template.TemplateService).AddTemplate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServiceAddTemplateArgs() interface{} {
	return template.NewTemplateServiceAddTemplateArgs()
}

func newTemplateServiceAddTemplateResult() interface{} {
	return template.NewTemplateServiceAddTemplateResult()
}

func deleteTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServiceDeleteTemplateArgs)
	realResult := result.(*template.TemplateServiceDeleteTemplateResult)
	success, err := handler.(template.TemplateService).DeleteTemplate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServiceDeleteTemplateArgs() interface{} {
	return template.NewTemplateServiceDeleteTemplateArgs()
}

func newTemplateServiceDeleteTemplateResult() interface{} {
	return template.NewTemplateServiceDeleteTemplateResult()
}

func updateTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServiceUpdateTemplateArgs)
	realResult := result.(*template.TemplateServiceUpdateTemplateResult)
	success, err := handler.(template.TemplateService).UpdateTemplate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServiceUpdateTemplateArgs() interface{} {
	return template.NewTemplateServiceUpdateTemplateArgs()
}

func newTemplateServiceUpdateTemplateResult() interface{} {
	return template.NewTemplateServiceUpdateTemplateResult()
}

func getTemplatesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServiceGetTemplatesArgs)
	realResult := result.(*template.TemplateServiceGetTemplatesResult)
	success, err := handler.(template.TemplateService).GetTemplates(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServiceGetTemplatesArgs() interface{} {
	return template.NewTemplateServiceGetTemplatesArgs()
}

func newTemplateServiceGetTemplatesResult() interface{} {
	return template.NewTemplateServiceGetTemplatesResult()
}

func addTemplateItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServiceAddTemplateItemArgs)
	realResult := result.(*template.TemplateServiceAddTemplateItemResult)
	success, err := handler.(template.TemplateService).AddTemplateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServiceAddTemplateItemArgs() interface{} {
	return template.NewTemplateServiceAddTemplateItemArgs()
}

func newTemplateServiceAddTemplateItemResult() interface{} {
	return template.NewTemplateServiceAddTemplateItemResult()
}

func deleteTemplateItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServiceDeleteTemplateItemArgs)
	realResult := result.(*template.TemplateServiceDeleteTemplateItemResult)
	success, err := handler.(template.TemplateService).DeleteTemplateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServiceDeleteTemplateItemArgs() interface{} {
	return template.NewTemplateServiceDeleteTemplateItemArgs()
}

func newTemplateServiceDeleteTemplateItemResult() interface{} {
	return template.NewTemplateServiceDeleteTemplateItemResult()
}

func updateTemplateItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServiceUpdateTemplateItemArgs)
	realResult := result.(*template.TemplateServiceUpdateTemplateItemResult)
	success, err := handler.(template.TemplateService).UpdateTemplateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServiceUpdateTemplateItemArgs() interface{} {
	return template.NewTemplateServiceUpdateTemplateItemArgs()
}

func newTemplateServiceUpdateTemplateItemResult() interface{} {
	return template.NewTemplateServiceUpdateTemplateItemResult()
}

func getTemplateItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*template.TemplateServiceGetTemplateItemsArgs)
	realResult := result.(*template.TemplateServiceGetTemplateItemsResult)
	success, err := handler.(template.TemplateService).GetTemplateItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTemplateServiceGetTemplateItemsArgs() interface{} {
	return template.NewTemplateServiceGetTemplateItemsArgs()
}

func newTemplateServiceGetTemplateItemsResult() interface{} {
	return template.NewTemplateServiceGetTemplateItemsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddTemplate(ctx context.Context, req *template.AddTemplateReq) (r *template.AddTemplateRes, err error) {
	var _args template.TemplateServiceAddTemplateArgs
	_args.Req = req
	var _result template.TemplateServiceAddTemplateResult
	if err = p.c.Call(ctx, "AddTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTemplate(ctx context.Context, req *template.DeleteTemplateReq) (r *template.DeleteTemplateRes, err error) {
	var _args template.TemplateServiceDeleteTemplateArgs
	_args.Req = req
	var _result template.TemplateServiceDeleteTemplateResult
	if err = p.c.Call(ctx, "DeleteTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTemplate(ctx context.Context, req *template.UpdateTemplateReq) (r *template.UpdateTemplateRes, err error) {
	var _args template.TemplateServiceUpdateTemplateArgs
	_args.Req = req
	var _result template.TemplateServiceUpdateTemplateResult
	if err = p.c.Call(ctx, "UpdateTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTemplates(ctx context.Context, req *template.GetTemplateItemsReq) (r *template.GetTemplatesRes, err error) {
	var _args template.TemplateServiceGetTemplatesArgs
	_args.Req = req
	var _result template.TemplateServiceGetTemplatesResult
	if err = p.c.Call(ctx, "GetTemplates", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddTemplateItem(ctx context.Context, req *template.AddTemplateItemReq) (r *template.AddTemplateItemRes, err error) {
	var _args template.TemplateServiceAddTemplateItemArgs
	_args.Req = req
	var _result template.TemplateServiceAddTemplateItemResult
	if err = p.c.Call(ctx, "AddTemplateItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTemplateItem(ctx context.Context, req *template.DeleteTemplateItemReq) (r *template.DeleteTemplateRes, err error) {
	var _args template.TemplateServiceDeleteTemplateItemArgs
	_args.Req = req
	var _result template.TemplateServiceDeleteTemplateItemResult
	if err = p.c.Call(ctx, "DeleteTemplateItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTemplateItem(ctx context.Context, req *template.UpdateTemplateItemReq) (r *template.UpdateTemplateItemRes, err error) {
	var _args template.TemplateServiceUpdateTemplateItemArgs
	_args.Req = req
	var _result template.TemplateServiceUpdateTemplateItemResult
	if err = p.c.Call(ctx, "UpdateTemplateItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTemplateItems(ctx context.Context, req *template.GetTemplatesReq) (r *template.GetTemplateItemsRes, err error) {
	var _args template.TemplateServiceGetTemplateItemsArgs
	_args.Req = req
	var _result template.TemplateServiceGetTemplateItemsResult
	if err = p.c.Call(ctx, "GetTemplateItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
