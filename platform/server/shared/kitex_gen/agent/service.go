// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package agent

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type AgentService interface {
	AddRepository(ctx context.Context, req *AddRepositoryReq) (r *AddRepositoryRes, err error)

	DeleteRepositories(ctx context.Context, req *DeleteRepositoriesReq) (r *DeleteRepositoriesRes, err error)

	UpdateRepository(ctx context.Context, req *UpdateRepositoryReq) (r *UpdateRepositoryRes, err error)

	GetRepositories(ctx context.Context, req *GetRepositoriesReq) (r *GetRepositoriesRes, err error)

	SyncRepositoryById(ctx context.Context, req *SyncRepositoryByIdReq) (r *SyncRepositoryByIdRes, err error)

	AddIDL(ctx context.Context, req *AddIDLReq) (r *AddIDLRes, err error)

	DeleteIDL(ctx context.Context, req *DeleteIDLsReq) (r *DeleteIDLsRes, err error)

	UpdateIDL(ctx context.Context, req *UpdateIDLReq) (r *UpdateIDLRes, err error)

	GetIDLs(ctx context.Context, req *GetIDLsReq) (r *GetIDLsRes, err error)

	SyncIDLsById(ctx context.Context, req *SyncIDLsByIdReq) (r *SyncIDLsByIdRes, err error)

	UpdateTasks(ctx context.Context, req *UpdateTasksReq) (r *UpdateTasksRes, err error)

	GenerateCode(ctx context.Context, req *GenerateCodeReq) (r *GenerateCodeRes, err error)
}

type AgentServiceClient struct {
	c thrift.TClient
}

func NewAgentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AgentServiceClient {
	return &AgentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAgentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AgentServiceClient {
	return &AgentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAgentServiceClient(c thrift.TClient) *AgentServiceClient {
	return &AgentServiceClient{
		c: c,
	}
}

func (p *AgentServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *AgentServiceClient) AddRepository(ctx context.Context, req *AddRepositoryReq) (r *AddRepositoryRes, err error) {
	var _args AgentServiceAddRepositoryArgs
	_args.Req = req
	var _result AgentServiceAddRepositoryResult
	if err = p.Client_().Call(ctx, "AddRepository", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) DeleteRepositories(ctx context.Context, req *DeleteRepositoriesReq) (r *DeleteRepositoriesRes, err error) {
	var _args AgentServiceDeleteRepositoriesArgs
	_args.Req = req
	var _result AgentServiceDeleteRepositoriesResult
	if err = p.Client_().Call(ctx, "DeleteRepositories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) UpdateRepository(ctx context.Context, req *UpdateRepositoryReq) (r *UpdateRepositoryRes, err error) {
	var _args AgentServiceUpdateRepositoryArgs
	_args.Req = req
	var _result AgentServiceUpdateRepositoryResult
	if err = p.Client_().Call(ctx, "UpdateRepository", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) GetRepositories(ctx context.Context, req *GetRepositoriesReq) (r *GetRepositoriesRes, err error) {
	var _args AgentServiceGetRepositoriesArgs
	_args.Req = req
	var _result AgentServiceGetRepositoriesResult
	if err = p.Client_().Call(ctx, "GetRepositories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) SyncRepositoryById(ctx context.Context, req *SyncRepositoryByIdReq) (r *SyncRepositoryByIdRes, err error) {
	var _args AgentServiceSyncRepositoryByIdArgs
	_args.Req = req
	var _result AgentServiceSyncRepositoryByIdResult
	if err = p.Client_().Call(ctx, "SyncRepositoryById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) AddIDL(ctx context.Context, req *AddIDLReq) (r *AddIDLRes, err error) {
	var _args AgentServiceAddIDLArgs
	_args.Req = req
	var _result AgentServiceAddIDLResult
	if err = p.Client_().Call(ctx, "AddIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) DeleteIDL(ctx context.Context, req *DeleteIDLsReq) (r *DeleteIDLsRes, err error) {
	var _args AgentServiceDeleteIDLArgs
	_args.Req = req
	var _result AgentServiceDeleteIDLResult
	if err = p.Client_().Call(ctx, "DeleteIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) UpdateIDL(ctx context.Context, req *UpdateIDLReq) (r *UpdateIDLRes, err error) {
	var _args AgentServiceUpdateIDLArgs
	_args.Req = req
	var _result AgentServiceUpdateIDLResult
	if err = p.Client_().Call(ctx, "UpdateIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) GetIDLs(ctx context.Context, req *GetIDLsReq) (r *GetIDLsRes, err error) {
	var _args AgentServiceGetIDLsArgs
	_args.Req = req
	var _result AgentServiceGetIDLsResult
	if err = p.Client_().Call(ctx, "GetIDLs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) SyncIDLsById(ctx context.Context, req *SyncIDLsByIdReq) (r *SyncIDLsByIdRes, err error) {
	var _args AgentServiceSyncIDLsByIdArgs
	_args.Req = req
	var _result AgentServiceSyncIDLsByIdResult
	if err = p.Client_().Call(ctx, "SyncIDLsById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) UpdateTasks(ctx context.Context, req *UpdateTasksReq) (r *UpdateTasksRes, err error) {
	var _args AgentServiceUpdateTasksArgs
	_args.Req = req
	var _result AgentServiceUpdateTasksResult
	if err = p.Client_().Call(ctx, "UpdateTasks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AgentServiceClient) GenerateCode(ctx context.Context, req *GenerateCodeReq) (r *GenerateCodeRes, err error) {
	var _args AgentServiceGenerateCodeArgs
	_args.Req = req
	var _result AgentServiceGenerateCodeResult
	if err = p.Client_().Call(ctx, "GenerateCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type AgentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AgentService
}

func (p *AgentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AgentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AgentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAgentServiceProcessor(handler AgentService) *AgentServiceProcessor {
	self := &AgentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("AddRepository", &agentServiceProcessorAddRepository{handler: handler})
	self.AddToProcessorMap("DeleteRepositories", &agentServiceProcessorDeleteRepositories{handler: handler})
	self.AddToProcessorMap("UpdateRepository", &agentServiceProcessorUpdateRepository{handler: handler})
	self.AddToProcessorMap("GetRepositories", &agentServiceProcessorGetRepositories{handler: handler})
	self.AddToProcessorMap("SyncRepositoryById", &agentServiceProcessorSyncRepositoryById{handler: handler})
	self.AddToProcessorMap("AddIDL", &agentServiceProcessorAddIDL{handler: handler})
	self.AddToProcessorMap("DeleteIDL", &agentServiceProcessorDeleteIDL{handler: handler})
	self.AddToProcessorMap("UpdateIDL", &agentServiceProcessorUpdateIDL{handler: handler})
	self.AddToProcessorMap("GetIDLs", &agentServiceProcessorGetIDLs{handler: handler})
	self.AddToProcessorMap("SyncIDLsById", &agentServiceProcessorSyncIDLsById{handler: handler})
	self.AddToProcessorMap("UpdateTasks", &agentServiceProcessorUpdateTasks{handler: handler})
	self.AddToProcessorMap("GenerateCode", &agentServiceProcessorGenerateCode{handler: handler})
	return self
}
func (p *AgentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type agentServiceProcessorAddRepository struct {
	handler AgentService
}

func (p *agentServiceProcessorAddRepository) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceAddRepositoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddRepository", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceAddRepositoryResult{}
	var retval *AddRepositoryRes
	if retval, err2 = p.handler.AddRepository(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddRepository: "+err2.Error())
		oprot.WriteMessageBegin("AddRepository", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddRepository", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorDeleteRepositories struct {
	handler AgentService
}

func (p *agentServiceProcessorDeleteRepositories) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceDeleteRepositoriesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteRepositories", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceDeleteRepositoriesResult{}
	var retval *DeleteRepositoriesRes
	if retval, err2 = p.handler.DeleteRepositories(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteRepositories: "+err2.Error())
		oprot.WriteMessageBegin("DeleteRepositories", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteRepositories", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorUpdateRepository struct {
	handler AgentService
}

func (p *agentServiceProcessorUpdateRepository) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceUpdateRepositoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateRepository", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceUpdateRepositoryResult{}
	var retval *UpdateRepositoryRes
	if retval, err2 = p.handler.UpdateRepository(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateRepository: "+err2.Error())
		oprot.WriteMessageBegin("UpdateRepository", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateRepository", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorGetRepositories struct {
	handler AgentService
}

func (p *agentServiceProcessorGetRepositories) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceGetRepositoriesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRepositories", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceGetRepositoriesResult{}
	var retval *GetRepositoriesRes
	if retval, err2 = p.handler.GetRepositories(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRepositories: "+err2.Error())
		oprot.WriteMessageBegin("GetRepositories", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRepositories", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorSyncRepositoryById struct {
	handler AgentService
}

func (p *agentServiceProcessorSyncRepositoryById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceSyncRepositoryByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SyncRepositoryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceSyncRepositoryByIdResult{}
	var retval *SyncRepositoryByIdRes
	if retval, err2 = p.handler.SyncRepositoryById(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SyncRepositoryById: "+err2.Error())
		oprot.WriteMessageBegin("SyncRepositoryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SyncRepositoryById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorAddIDL struct {
	handler AgentService
}

func (p *agentServiceProcessorAddIDL) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceAddIDLArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddIDL", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceAddIDLResult{}
	var retval *AddIDLRes
	if retval, err2 = p.handler.AddIDL(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddIDL: "+err2.Error())
		oprot.WriteMessageBegin("AddIDL", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddIDL", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorDeleteIDL struct {
	handler AgentService
}

func (p *agentServiceProcessorDeleteIDL) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceDeleteIDLArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteIDL", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceDeleteIDLResult{}
	var retval *DeleteIDLsRes
	if retval, err2 = p.handler.DeleteIDL(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteIDL: "+err2.Error())
		oprot.WriteMessageBegin("DeleteIDL", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteIDL", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorUpdateIDL struct {
	handler AgentService
}

func (p *agentServiceProcessorUpdateIDL) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceUpdateIDLArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateIDL", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceUpdateIDLResult{}
	var retval *UpdateIDLRes
	if retval, err2 = p.handler.UpdateIDL(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateIDL: "+err2.Error())
		oprot.WriteMessageBegin("UpdateIDL", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateIDL", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorGetIDLs struct {
	handler AgentService
}

func (p *agentServiceProcessorGetIDLs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceGetIDLsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetIDLs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceGetIDLsResult{}
	var retval *GetIDLsRes
	if retval, err2 = p.handler.GetIDLs(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetIDLs: "+err2.Error())
		oprot.WriteMessageBegin("GetIDLs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetIDLs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorSyncIDLsById struct {
	handler AgentService
}

func (p *agentServiceProcessorSyncIDLsById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceSyncIDLsByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SyncIDLsById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceSyncIDLsByIdResult{}
	var retval *SyncIDLsByIdRes
	if retval, err2 = p.handler.SyncIDLsById(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SyncIDLsById: "+err2.Error())
		oprot.WriteMessageBegin("SyncIDLsById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SyncIDLsById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorUpdateTasks struct {
	handler AgentService
}

func (p *agentServiceProcessorUpdateTasks) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceUpdateTasksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateTasks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceUpdateTasksResult{}
	var retval *UpdateTasksRes
	if retval, err2 = p.handler.UpdateTasks(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateTasks: "+err2.Error())
		oprot.WriteMessageBegin("UpdateTasks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateTasks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type agentServiceProcessorGenerateCode struct {
	handler AgentService
}

func (p *agentServiceProcessorGenerateCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AgentServiceGenerateCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GenerateCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AgentServiceGenerateCodeResult{}
	var retval *GenerateCodeRes
	if retval, err2 = p.handler.GenerateCode(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenerateCode: "+err2.Error())
		oprot.WriteMessageBegin("GenerateCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GenerateCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type AgentServiceAddRepositoryArgs struct {
	Req *AddRepositoryReq `thrift:"req,1" frugal:"1,default,AddRepositoryReq" json:"req"`
}

func NewAgentServiceAddRepositoryArgs() *AgentServiceAddRepositoryArgs {
	return &AgentServiceAddRepositoryArgs{}
}

func (p *AgentServiceAddRepositoryArgs) InitDefault() {
	*p = AgentServiceAddRepositoryArgs{}
}

var AgentServiceAddRepositoryArgs_Req_DEFAULT *AddRepositoryReq

func (p *AgentServiceAddRepositoryArgs) GetReq() (v *AddRepositoryReq) {
	if !p.IsSetReq() {
		return AgentServiceAddRepositoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceAddRepositoryArgs) SetReq(val *AddRepositoryReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceAddRepositoryArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceAddRepositoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceAddRepositoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceAddRepositoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceAddRepositoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAddRepositoryReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceAddRepositoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddRepository_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceAddRepositoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceAddRepositoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceAddRepositoryArgs(%+v)", *p)
}

func (p *AgentServiceAddRepositoryArgs) DeepEqual(ano *AgentServiceAddRepositoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceAddRepositoryArgs) Field1DeepEqual(src *AddRepositoryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceAddRepositoryResult struct {
	Success *AddRepositoryRes `thrift:"success,0,optional" frugal:"0,optional,AddRepositoryRes" json:"success,omitempty"`
}

func NewAgentServiceAddRepositoryResult() *AgentServiceAddRepositoryResult {
	return &AgentServiceAddRepositoryResult{}
}

func (p *AgentServiceAddRepositoryResult) InitDefault() {
	*p = AgentServiceAddRepositoryResult{}
}

var AgentServiceAddRepositoryResult_Success_DEFAULT *AddRepositoryRes

func (p *AgentServiceAddRepositoryResult) GetSuccess() (v *AddRepositoryRes) {
	if !p.IsSetSuccess() {
		return AgentServiceAddRepositoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceAddRepositoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddRepositoryRes)
}

var fieldIDToName_AgentServiceAddRepositoryResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceAddRepositoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceAddRepositoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceAddRepositoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceAddRepositoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAddRepositoryRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceAddRepositoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddRepository_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceAddRepositoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceAddRepositoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceAddRepositoryResult(%+v)", *p)
}

func (p *AgentServiceAddRepositoryResult) DeepEqual(ano *AgentServiceAddRepositoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceAddRepositoryResult) Field0DeepEqual(src *AddRepositoryRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceDeleteRepositoriesArgs struct {
	Req *DeleteRepositoriesReq `thrift:"req,1" frugal:"1,default,DeleteRepositoriesReq" json:"req"`
}

func NewAgentServiceDeleteRepositoriesArgs() *AgentServiceDeleteRepositoriesArgs {
	return &AgentServiceDeleteRepositoriesArgs{}
}

func (p *AgentServiceDeleteRepositoriesArgs) InitDefault() {
	*p = AgentServiceDeleteRepositoriesArgs{}
}

var AgentServiceDeleteRepositoriesArgs_Req_DEFAULT *DeleteRepositoriesReq

func (p *AgentServiceDeleteRepositoriesArgs) GetReq() (v *DeleteRepositoriesReq) {
	if !p.IsSetReq() {
		return AgentServiceDeleteRepositoriesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceDeleteRepositoriesArgs) SetReq(val *DeleteRepositoriesReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceDeleteRepositoriesArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceDeleteRepositoriesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceDeleteRepositoriesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceDeleteRepositoriesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceDeleteRepositoriesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteRepositoriesReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceDeleteRepositoriesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRepositories_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceDeleteRepositoriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceDeleteRepositoriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceDeleteRepositoriesArgs(%+v)", *p)
}

func (p *AgentServiceDeleteRepositoriesArgs) DeepEqual(ano *AgentServiceDeleteRepositoriesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceDeleteRepositoriesArgs) Field1DeepEqual(src *DeleteRepositoriesReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceDeleteRepositoriesResult struct {
	Success *DeleteRepositoriesRes `thrift:"success,0,optional" frugal:"0,optional,DeleteRepositoriesRes" json:"success,omitempty"`
}

func NewAgentServiceDeleteRepositoriesResult() *AgentServiceDeleteRepositoriesResult {
	return &AgentServiceDeleteRepositoriesResult{}
}

func (p *AgentServiceDeleteRepositoriesResult) InitDefault() {
	*p = AgentServiceDeleteRepositoriesResult{}
}

var AgentServiceDeleteRepositoriesResult_Success_DEFAULT *DeleteRepositoriesRes

func (p *AgentServiceDeleteRepositoriesResult) GetSuccess() (v *DeleteRepositoriesRes) {
	if !p.IsSetSuccess() {
		return AgentServiceDeleteRepositoriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceDeleteRepositoriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteRepositoriesRes)
}

var fieldIDToName_AgentServiceDeleteRepositoriesResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceDeleteRepositoriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceDeleteRepositoriesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceDeleteRepositoriesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceDeleteRepositoriesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteRepositoriesRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceDeleteRepositoriesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRepositories_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceDeleteRepositoriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceDeleteRepositoriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceDeleteRepositoriesResult(%+v)", *p)
}

func (p *AgentServiceDeleteRepositoriesResult) DeepEqual(ano *AgentServiceDeleteRepositoriesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceDeleteRepositoriesResult) Field0DeepEqual(src *DeleteRepositoriesRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceUpdateRepositoryArgs struct {
	Req *UpdateRepositoryReq `thrift:"req,1" frugal:"1,default,UpdateRepositoryReq" json:"req"`
}

func NewAgentServiceUpdateRepositoryArgs() *AgentServiceUpdateRepositoryArgs {
	return &AgentServiceUpdateRepositoryArgs{}
}

func (p *AgentServiceUpdateRepositoryArgs) InitDefault() {
	*p = AgentServiceUpdateRepositoryArgs{}
}

var AgentServiceUpdateRepositoryArgs_Req_DEFAULT *UpdateRepositoryReq

func (p *AgentServiceUpdateRepositoryArgs) GetReq() (v *UpdateRepositoryReq) {
	if !p.IsSetReq() {
		return AgentServiceUpdateRepositoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceUpdateRepositoryArgs) SetReq(val *UpdateRepositoryReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceUpdateRepositoryArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceUpdateRepositoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceUpdateRepositoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceUpdateRepositoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceUpdateRepositoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateRepositoryReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceUpdateRepositoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRepository_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceUpdateRepositoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceUpdateRepositoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceUpdateRepositoryArgs(%+v)", *p)
}

func (p *AgentServiceUpdateRepositoryArgs) DeepEqual(ano *AgentServiceUpdateRepositoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceUpdateRepositoryArgs) Field1DeepEqual(src *UpdateRepositoryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceUpdateRepositoryResult struct {
	Success *UpdateRepositoryRes `thrift:"success,0,optional" frugal:"0,optional,UpdateRepositoryRes" json:"success,omitempty"`
}

func NewAgentServiceUpdateRepositoryResult() *AgentServiceUpdateRepositoryResult {
	return &AgentServiceUpdateRepositoryResult{}
}

func (p *AgentServiceUpdateRepositoryResult) InitDefault() {
	*p = AgentServiceUpdateRepositoryResult{}
}

var AgentServiceUpdateRepositoryResult_Success_DEFAULT *UpdateRepositoryRes

func (p *AgentServiceUpdateRepositoryResult) GetSuccess() (v *UpdateRepositoryRes) {
	if !p.IsSetSuccess() {
		return AgentServiceUpdateRepositoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceUpdateRepositoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateRepositoryRes)
}

var fieldIDToName_AgentServiceUpdateRepositoryResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceUpdateRepositoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceUpdateRepositoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceUpdateRepositoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceUpdateRepositoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdateRepositoryRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceUpdateRepositoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRepository_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceUpdateRepositoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceUpdateRepositoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceUpdateRepositoryResult(%+v)", *p)
}

func (p *AgentServiceUpdateRepositoryResult) DeepEqual(ano *AgentServiceUpdateRepositoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceUpdateRepositoryResult) Field0DeepEqual(src *UpdateRepositoryRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceGetRepositoriesArgs struct {
	Req *GetRepositoriesReq `thrift:"req,1" frugal:"1,default,GetRepositoriesReq" json:"req"`
}

func NewAgentServiceGetRepositoriesArgs() *AgentServiceGetRepositoriesArgs {
	return &AgentServiceGetRepositoriesArgs{}
}

func (p *AgentServiceGetRepositoriesArgs) InitDefault() {
	*p = AgentServiceGetRepositoriesArgs{}
}

var AgentServiceGetRepositoriesArgs_Req_DEFAULT *GetRepositoriesReq

func (p *AgentServiceGetRepositoriesArgs) GetReq() (v *GetRepositoriesReq) {
	if !p.IsSetReq() {
		return AgentServiceGetRepositoriesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceGetRepositoriesArgs) SetReq(val *GetRepositoriesReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceGetRepositoriesArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceGetRepositoriesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceGetRepositoriesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceGetRepositoriesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceGetRepositoriesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRepositoriesReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceGetRepositoriesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRepositories_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceGetRepositoriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceGetRepositoriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceGetRepositoriesArgs(%+v)", *p)
}

func (p *AgentServiceGetRepositoriesArgs) DeepEqual(ano *AgentServiceGetRepositoriesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceGetRepositoriesArgs) Field1DeepEqual(src *GetRepositoriesReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceGetRepositoriesResult struct {
	Success *GetRepositoriesRes `thrift:"success,0,optional" frugal:"0,optional,GetRepositoriesRes" json:"success,omitempty"`
}

func NewAgentServiceGetRepositoriesResult() *AgentServiceGetRepositoriesResult {
	return &AgentServiceGetRepositoriesResult{}
}

func (p *AgentServiceGetRepositoriesResult) InitDefault() {
	*p = AgentServiceGetRepositoriesResult{}
}

var AgentServiceGetRepositoriesResult_Success_DEFAULT *GetRepositoriesRes

func (p *AgentServiceGetRepositoriesResult) GetSuccess() (v *GetRepositoriesRes) {
	if !p.IsSetSuccess() {
		return AgentServiceGetRepositoriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceGetRepositoriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetRepositoriesRes)
}

var fieldIDToName_AgentServiceGetRepositoriesResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceGetRepositoriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceGetRepositoriesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceGetRepositoriesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceGetRepositoriesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetRepositoriesRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceGetRepositoriesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRepositories_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceGetRepositoriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceGetRepositoriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceGetRepositoriesResult(%+v)", *p)
}

func (p *AgentServiceGetRepositoriesResult) DeepEqual(ano *AgentServiceGetRepositoriesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceGetRepositoriesResult) Field0DeepEqual(src *GetRepositoriesRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceSyncRepositoryByIdArgs struct {
	Req *SyncRepositoryByIdReq `thrift:"req,1" frugal:"1,default,SyncRepositoryByIdReq" json:"req"`
}

func NewAgentServiceSyncRepositoryByIdArgs() *AgentServiceSyncRepositoryByIdArgs {
	return &AgentServiceSyncRepositoryByIdArgs{}
}

func (p *AgentServiceSyncRepositoryByIdArgs) InitDefault() {
	*p = AgentServiceSyncRepositoryByIdArgs{}
}

var AgentServiceSyncRepositoryByIdArgs_Req_DEFAULT *SyncRepositoryByIdReq

func (p *AgentServiceSyncRepositoryByIdArgs) GetReq() (v *SyncRepositoryByIdReq) {
	if !p.IsSetReq() {
		return AgentServiceSyncRepositoryByIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceSyncRepositoryByIdArgs) SetReq(val *SyncRepositoryByIdReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceSyncRepositoryByIdArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceSyncRepositoryByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceSyncRepositoryByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceSyncRepositoryByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceSyncRepositoryByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSyncRepositoryByIdReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceSyncRepositoryByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncRepositoryById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceSyncRepositoryByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceSyncRepositoryByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceSyncRepositoryByIdArgs(%+v)", *p)
}

func (p *AgentServiceSyncRepositoryByIdArgs) DeepEqual(ano *AgentServiceSyncRepositoryByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceSyncRepositoryByIdArgs) Field1DeepEqual(src *SyncRepositoryByIdReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceSyncRepositoryByIdResult struct {
	Success *SyncRepositoryByIdRes `thrift:"success,0,optional" frugal:"0,optional,SyncRepositoryByIdRes" json:"success,omitempty"`
}

func NewAgentServiceSyncRepositoryByIdResult() *AgentServiceSyncRepositoryByIdResult {
	return &AgentServiceSyncRepositoryByIdResult{}
}

func (p *AgentServiceSyncRepositoryByIdResult) InitDefault() {
	*p = AgentServiceSyncRepositoryByIdResult{}
}

var AgentServiceSyncRepositoryByIdResult_Success_DEFAULT *SyncRepositoryByIdRes

func (p *AgentServiceSyncRepositoryByIdResult) GetSuccess() (v *SyncRepositoryByIdRes) {
	if !p.IsSetSuccess() {
		return AgentServiceSyncRepositoryByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceSyncRepositoryByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*SyncRepositoryByIdRes)
}

var fieldIDToName_AgentServiceSyncRepositoryByIdResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceSyncRepositoryByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceSyncRepositoryByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceSyncRepositoryByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceSyncRepositoryByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncRepositoryByIdRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceSyncRepositoryByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncRepositoryById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceSyncRepositoryByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceSyncRepositoryByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceSyncRepositoryByIdResult(%+v)", *p)
}

func (p *AgentServiceSyncRepositoryByIdResult) DeepEqual(ano *AgentServiceSyncRepositoryByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceSyncRepositoryByIdResult) Field0DeepEqual(src *SyncRepositoryByIdRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceAddIDLArgs struct {
	Req *AddIDLReq `thrift:"req,1" frugal:"1,default,AddIDLReq" json:"req"`
}

func NewAgentServiceAddIDLArgs() *AgentServiceAddIDLArgs {
	return &AgentServiceAddIDLArgs{}
}

func (p *AgentServiceAddIDLArgs) InitDefault() {
	*p = AgentServiceAddIDLArgs{}
}

var AgentServiceAddIDLArgs_Req_DEFAULT *AddIDLReq

func (p *AgentServiceAddIDLArgs) GetReq() (v *AddIDLReq) {
	if !p.IsSetReq() {
		return AgentServiceAddIDLArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceAddIDLArgs) SetReq(val *AddIDLReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceAddIDLArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceAddIDLArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceAddIDLArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceAddIDLArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceAddIDLArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAddIDLReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceAddIDLArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddIDL_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceAddIDLArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceAddIDLArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceAddIDLArgs(%+v)", *p)
}

func (p *AgentServiceAddIDLArgs) DeepEqual(ano *AgentServiceAddIDLArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceAddIDLArgs) Field1DeepEqual(src *AddIDLReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceAddIDLResult struct {
	Success *AddIDLRes `thrift:"success,0,optional" frugal:"0,optional,AddIDLRes" json:"success,omitempty"`
}

func NewAgentServiceAddIDLResult() *AgentServiceAddIDLResult {
	return &AgentServiceAddIDLResult{}
}

func (p *AgentServiceAddIDLResult) InitDefault() {
	*p = AgentServiceAddIDLResult{}
}

var AgentServiceAddIDLResult_Success_DEFAULT *AddIDLRes

func (p *AgentServiceAddIDLResult) GetSuccess() (v *AddIDLRes) {
	if !p.IsSetSuccess() {
		return AgentServiceAddIDLResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceAddIDLResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddIDLRes)
}

var fieldIDToName_AgentServiceAddIDLResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceAddIDLResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceAddIDLResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceAddIDLResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceAddIDLResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAddIDLRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceAddIDLResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddIDL_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceAddIDLResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceAddIDLResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceAddIDLResult(%+v)", *p)
}

func (p *AgentServiceAddIDLResult) DeepEqual(ano *AgentServiceAddIDLResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceAddIDLResult) Field0DeepEqual(src *AddIDLRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceDeleteIDLArgs struct {
	Req *DeleteIDLsReq `thrift:"req,1" frugal:"1,default,DeleteIDLsReq" json:"req"`
}

func NewAgentServiceDeleteIDLArgs() *AgentServiceDeleteIDLArgs {
	return &AgentServiceDeleteIDLArgs{}
}

func (p *AgentServiceDeleteIDLArgs) InitDefault() {
	*p = AgentServiceDeleteIDLArgs{}
}

var AgentServiceDeleteIDLArgs_Req_DEFAULT *DeleteIDLsReq

func (p *AgentServiceDeleteIDLArgs) GetReq() (v *DeleteIDLsReq) {
	if !p.IsSetReq() {
		return AgentServiceDeleteIDLArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceDeleteIDLArgs) SetReq(val *DeleteIDLsReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceDeleteIDLArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceDeleteIDLArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceDeleteIDLArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceDeleteIDLArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceDeleteIDLArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteIDLsReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceDeleteIDLArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteIDL_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceDeleteIDLArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceDeleteIDLArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceDeleteIDLArgs(%+v)", *p)
}

func (p *AgentServiceDeleteIDLArgs) DeepEqual(ano *AgentServiceDeleteIDLArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceDeleteIDLArgs) Field1DeepEqual(src *DeleteIDLsReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceDeleteIDLResult struct {
	Success *DeleteIDLsRes `thrift:"success,0,optional" frugal:"0,optional,DeleteIDLsRes" json:"success,omitempty"`
}

func NewAgentServiceDeleteIDLResult() *AgentServiceDeleteIDLResult {
	return &AgentServiceDeleteIDLResult{}
}

func (p *AgentServiceDeleteIDLResult) InitDefault() {
	*p = AgentServiceDeleteIDLResult{}
}

var AgentServiceDeleteIDLResult_Success_DEFAULT *DeleteIDLsRes

func (p *AgentServiceDeleteIDLResult) GetSuccess() (v *DeleteIDLsRes) {
	if !p.IsSetSuccess() {
		return AgentServiceDeleteIDLResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceDeleteIDLResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteIDLsRes)
}

var fieldIDToName_AgentServiceDeleteIDLResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceDeleteIDLResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceDeleteIDLResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceDeleteIDLResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceDeleteIDLResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteIDLsRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceDeleteIDLResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteIDL_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceDeleteIDLResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceDeleteIDLResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceDeleteIDLResult(%+v)", *p)
}

func (p *AgentServiceDeleteIDLResult) DeepEqual(ano *AgentServiceDeleteIDLResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceDeleteIDLResult) Field0DeepEqual(src *DeleteIDLsRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceUpdateIDLArgs struct {
	Req *UpdateIDLReq `thrift:"req,1" frugal:"1,default,UpdateIDLReq" json:"req"`
}

func NewAgentServiceUpdateIDLArgs() *AgentServiceUpdateIDLArgs {
	return &AgentServiceUpdateIDLArgs{}
}

func (p *AgentServiceUpdateIDLArgs) InitDefault() {
	*p = AgentServiceUpdateIDLArgs{}
}

var AgentServiceUpdateIDLArgs_Req_DEFAULT *UpdateIDLReq

func (p *AgentServiceUpdateIDLArgs) GetReq() (v *UpdateIDLReq) {
	if !p.IsSetReq() {
		return AgentServiceUpdateIDLArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceUpdateIDLArgs) SetReq(val *UpdateIDLReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceUpdateIDLArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceUpdateIDLArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceUpdateIDLArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceUpdateIDLArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceUpdateIDLArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateIDLReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceUpdateIDLArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateIDL_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceUpdateIDLArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceUpdateIDLArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceUpdateIDLArgs(%+v)", *p)
}

func (p *AgentServiceUpdateIDLArgs) DeepEqual(ano *AgentServiceUpdateIDLArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceUpdateIDLArgs) Field1DeepEqual(src *UpdateIDLReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceUpdateIDLResult struct {
	Success *UpdateIDLRes `thrift:"success,0,optional" frugal:"0,optional,UpdateIDLRes" json:"success,omitempty"`
}

func NewAgentServiceUpdateIDLResult() *AgentServiceUpdateIDLResult {
	return &AgentServiceUpdateIDLResult{}
}

func (p *AgentServiceUpdateIDLResult) InitDefault() {
	*p = AgentServiceUpdateIDLResult{}
}

var AgentServiceUpdateIDLResult_Success_DEFAULT *UpdateIDLRes

func (p *AgentServiceUpdateIDLResult) GetSuccess() (v *UpdateIDLRes) {
	if !p.IsSetSuccess() {
		return AgentServiceUpdateIDLResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceUpdateIDLResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateIDLRes)
}

var fieldIDToName_AgentServiceUpdateIDLResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceUpdateIDLResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceUpdateIDLResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceUpdateIDLResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceUpdateIDLResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdateIDLRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceUpdateIDLResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateIDL_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceUpdateIDLResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceUpdateIDLResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceUpdateIDLResult(%+v)", *p)
}

func (p *AgentServiceUpdateIDLResult) DeepEqual(ano *AgentServiceUpdateIDLResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceUpdateIDLResult) Field0DeepEqual(src *UpdateIDLRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceGetIDLsArgs struct {
	Req *GetIDLsReq `thrift:"req,1" frugal:"1,default,GetIDLsReq" json:"req"`
}

func NewAgentServiceGetIDLsArgs() *AgentServiceGetIDLsArgs {
	return &AgentServiceGetIDLsArgs{}
}

func (p *AgentServiceGetIDLsArgs) InitDefault() {
	*p = AgentServiceGetIDLsArgs{}
}

var AgentServiceGetIDLsArgs_Req_DEFAULT *GetIDLsReq

func (p *AgentServiceGetIDLsArgs) GetReq() (v *GetIDLsReq) {
	if !p.IsSetReq() {
		return AgentServiceGetIDLsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceGetIDLsArgs) SetReq(val *GetIDLsReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceGetIDLsArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceGetIDLsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceGetIDLsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceGetIDLsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceGetIDLsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetIDLsReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceGetIDLsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetIDLs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceGetIDLsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceGetIDLsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceGetIDLsArgs(%+v)", *p)
}

func (p *AgentServiceGetIDLsArgs) DeepEqual(ano *AgentServiceGetIDLsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceGetIDLsArgs) Field1DeepEqual(src *GetIDLsReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceGetIDLsResult struct {
	Success *GetIDLsRes `thrift:"success,0,optional" frugal:"0,optional,GetIDLsRes" json:"success,omitempty"`
}

func NewAgentServiceGetIDLsResult() *AgentServiceGetIDLsResult {
	return &AgentServiceGetIDLsResult{}
}

func (p *AgentServiceGetIDLsResult) InitDefault() {
	*p = AgentServiceGetIDLsResult{}
}

var AgentServiceGetIDLsResult_Success_DEFAULT *GetIDLsRes

func (p *AgentServiceGetIDLsResult) GetSuccess() (v *GetIDLsRes) {
	if !p.IsSetSuccess() {
		return AgentServiceGetIDLsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceGetIDLsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetIDLsRes)
}

var fieldIDToName_AgentServiceGetIDLsResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceGetIDLsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceGetIDLsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceGetIDLsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceGetIDLsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetIDLsRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceGetIDLsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetIDLs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceGetIDLsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceGetIDLsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceGetIDLsResult(%+v)", *p)
}

func (p *AgentServiceGetIDLsResult) DeepEqual(ano *AgentServiceGetIDLsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceGetIDLsResult) Field0DeepEqual(src *GetIDLsRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceSyncIDLsByIdArgs struct {
	Req *SyncIDLsByIdReq `thrift:"req,1" frugal:"1,default,SyncIDLsByIdReq" json:"req"`
}

func NewAgentServiceSyncIDLsByIdArgs() *AgentServiceSyncIDLsByIdArgs {
	return &AgentServiceSyncIDLsByIdArgs{}
}

func (p *AgentServiceSyncIDLsByIdArgs) InitDefault() {
	*p = AgentServiceSyncIDLsByIdArgs{}
}

var AgentServiceSyncIDLsByIdArgs_Req_DEFAULT *SyncIDLsByIdReq

func (p *AgentServiceSyncIDLsByIdArgs) GetReq() (v *SyncIDLsByIdReq) {
	if !p.IsSetReq() {
		return AgentServiceSyncIDLsByIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceSyncIDLsByIdArgs) SetReq(val *SyncIDLsByIdReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceSyncIDLsByIdArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceSyncIDLsByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceSyncIDLsByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceSyncIDLsByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceSyncIDLsByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSyncIDLsByIdReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceSyncIDLsByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncIDLsById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceSyncIDLsByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceSyncIDLsByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceSyncIDLsByIdArgs(%+v)", *p)
}

func (p *AgentServiceSyncIDLsByIdArgs) DeepEqual(ano *AgentServiceSyncIDLsByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceSyncIDLsByIdArgs) Field1DeepEqual(src *SyncIDLsByIdReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceSyncIDLsByIdResult struct {
	Success *SyncIDLsByIdRes `thrift:"success,0,optional" frugal:"0,optional,SyncIDLsByIdRes" json:"success,omitempty"`
}

func NewAgentServiceSyncIDLsByIdResult() *AgentServiceSyncIDLsByIdResult {
	return &AgentServiceSyncIDLsByIdResult{}
}

func (p *AgentServiceSyncIDLsByIdResult) InitDefault() {
	*p = AgentServiceSyncIDLsByIdResult{}
}

var AgentServiceSyncIDLsByIdResult_Success_DEFAULT *SyncIDLsByIdRes

func (p *AgentServiceSyncIDLsByIdResult) GetSuccess() (v *SyncIDLsByIdRes) {
	if !p.IsSetSuccess() {
		return AgentServiceSyncIDLsByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceSyncIDLsByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*SyncIDLsByIdRes)
}

var fieldIDToName_AgentServiceSyncIDLsByIdResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceSyncIDLsByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceSyncIDLsByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceSyncIDLsByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceSyncIDLsByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncIDLsByIdRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceSyncIDLsByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncIDLsById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceSyncIDLsByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceSyncIDLsByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceSyncIDLsByIdResult(%+v)", *p)
}

func (p *AgentServiceSyncIDLsByIdResult) DeepEqual(ano *AgentServiceSyncIDLsByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceSyncIDLsByIdResult) Field0DeepEqual(src *SyncIDLsByIdRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceUpdateTasksArgs struct {
	Req *UpdateTasksReq `thrift:"req,1" frugal:"1,default,UpdateTasksReq" json:"req"`
}

func NewAgentServiceUpdateTasksArgs() *AgentServiceUpdateTasksArgs {
	return &AgentServiceUpdateTasksArgs{}
}

func (p *AgentServiceUpdateTasksArgs) InitDefault() {
	*p = AgentServiceUpdateTasksArgs{}
}

var AgentServiceUpdateTasksArgs_Req_DEFAULT *UpdateTasksReq

func (p *AgentServiceUpdateTasksArgs) GetReq() (v *UpdateTasksReq) {
	if !p.IsSetReq() {
		return AgentServiceUpdateTasksArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceUpdateTasksArgs) SetReq(val *UpdateTasksReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceUpdateTasksArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceUpdateTasksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceUpdateTasksArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceUpdateTasksArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceUpdateTasksArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateTasksReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceUpdateTasksArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTasks_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceUpdateTasksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceUpdateTasksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceUpdateTasksArgs(%+v)", *p)
}

func (p *AgentServiceUpdateTasksArgs) DeepEqual(ano *AgentServiceUpdateTasksArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceUpdateTasksArgs) Field1DeepEqual(src *UpdateTasksReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceUpdateTasksResult struct {
	Success *UpdateTasksRes `thrift:"success,0,optional" frugal:"0,optional,UpdateTasksRes" json:"success,omitempty"`
}

func NewAgentServiceUpdateTasksResult() *AgentServiceUpdateTasksResult {
	return &AgentServiceUpdateTasksResult{}
}

func (p *AgentServiceUpdateTasksResult) InitDefault() {
	*p = AgentServiceUpdateTasksResult{}
}

var AgentServiceUpdateTasksResult_Success_DEFAULT *UpdateTasksRes

func (p *AgentServiceUpdateTasksResult) GetSuccess() (v *UpdateTasksRes) {
	if !p.IsSetSuccess() {
		return AgentServiceUpdateTasksResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceUpdateTasksResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateTasksRes)
}

var fieldIDToName_AgentServiceUpdateTasksResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceUpdateTasksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceUpdateTasksResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceUpdateTasksResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceUpdateTasksResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdateTasksRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceUpdateTasksResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTasks_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceUpdateTasksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceUpdateTasksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceUpdateTasksResult(%+v)", *p)
}

func (p *AgentServiceUpdateTasksResult) DeepEqual(ano *AgentServiceUpdateTasksResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceUpdateTasksResult) Field0DeepEqual(src *UpdateTasksRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceGenerateCodeArgs struct {
	Req *GenerateCodeReq `thrift:"req,1" frugal:"1,default,GenerateCodeReq" json:"req"`
}

func NewAgentServiceGenerateCodeArgs() *AgentServiceGenerateCodeArgs {
	return &AgentServiceGenerateCodeArgs{}
}

func (p *AgentServiceGenerateCodeArgs) InitDefault() {
	*p = AgentServiceGenerateCodeArgs{}
}

var AgentServiceGenerateCodeArgs_Req_DEFAULT *GenerateCodeReq

func (p *AgentServiceGenerateCodeArgs) GetReq() (v *GenerateCodeReq) {
	if !p.IsSetReq() {
		return AgentServiceGenerateCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AgentServiceGenerateCodeArgs) SetReq(val *GenerateCodeReq) {
	p.Req = val
}

var fieldIDToName_AgentServiceGenerateCodeArgs = map[int16]string{
	1: "req",
}

func (p *AgentServiceGenerateCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AgentServiceGenerateCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceGenerateCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceGenerateCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGenerateCodeReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceGenerateCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceGenerateCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AgentServiceGenerateCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceGenerateCodeArgs(%+v)", *p)
}

func (p *AgentServiceGenerateCodeArgs) DeepEqual(ano *AgentServiceGenerateCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AgentServiceGenerateCodeArgs) Field1DeepEqual(src *GenerateCodeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AgentServiceGenerateCodeResult struct {
	Success *GenerateCodeRes `thrift:"success,0,optional" frugal:"0,optional,GenerateCodeRes" json:"success,omitempty"`
}

func NewAgentServiceGenerateCodeResult() *AgentServiceGenerateCodeResult {
	return &AgentServiceGenerateCodeResult{}
}

func (p *AgentServiceGenerateCodeResult) InitDefault() {
	*p = AgentServiceGenerateCodeResult{}
}

var AgentServiceGenerateCodeResult_Success_DEFAULT *GenerateCodeRes

func (p *AgentServiceGenerateCodeResult) GetSuccess() (v *GenerateCodeRes) {
	if !p.IsSetSuccess() {
		return AgentServiceGenerateCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AgentServiceGenerateCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*GenerateCodeRes)
}

var fieldIDToName_AgentServiceGenerateCodeResult = map[int16]string{
	0: "success",
}

func (p *AgentServiceGenerateCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AgentServiceGenerateCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AgentServiceGenerateCodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AgentServiceGenerateCodeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGenerateCodeRes()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AgentServiceGenerateCodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AgentServiceGenerateCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AgentServiceGenerateCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentServiceGenerateCodeResult(%+v)", *p)
}

func (p *AgentServiceGenerateCodeResult) DeepEqual(ano *AgentServiceGenerateCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AgentServiceGenerateCodeResult) Field0DeepEqual(src *GenerateCodeRes) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
