// Code generated by Kitex v0.6.1. DO NOT EDIT.

package agentservice

import (
	"context"
	agent "github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/agent"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return agentServiceServiceInfo
}

var agentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AgentService"
	handlerType := (*agent.AgentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddRepository":      kitex.NewMethodInfo(addRepositoryHandler, newAgentServiceAddRepositoryArgs, newAgentServiceAddRepositoryResult, false),
		"DeleteRepositories": kitex.NewMethodInfo(deleteRepositoriesHandler, newAgentServiceDeleteRepositoriesArgs, newAgentServiceDeleteRepositoriesResult, false),
		"UpdateRepository":   kitex.NewMethodInfo(updateRepositoryHandler, newAgentServiceUpdateRepositoryArgs, newAgentServiceUpdateRepositoryResult, false),
		"GetRepositories":    kitex.NewMethodInfo(getRepositoriesHandler, newAgentServiceGetRepositoriesArgs, newAgentServiceGetRepositoriesResult, false),
		"SyncRepositoryById": kitex.NewMethodInfo(syncRepositoryByIdHandler, newAgentServiceSyncRepositoryByIdArgs, newAgentServiceSyncRepositoryByIdResult, false),
		"AddIDL":             kitex.NewMethodInfo(addIDLHandler, newAgentServiceAddIDLArgs, newAgentServiceAddIDLResult, false),
		"DeleteIDL":          kitex.NewMethodInfo(deleteIDLHandler, newAgentServiceDeleteIDLArgs, newAgentServiceDeleteIDLResult, false),
		"UpdateIDL":          kitex.NewMethodInfo(updateIDLHandler, newAgentServiceUpdateIDLArgs, newAgentServiceUpdateIDLResult, false),
		"GetIDLs":            kitex.NewMethodInfo(getIDLsHandler, newAgentServiceGetIDLsArgs, newAgentServiceGetIDLsResult, false),
		"SyncIDLsById":       kitex.NewMethodInfo(syncIDLsByIdHandler, newAgentServiceSyncIDLsByIdArgs, newAgentServiceSyncIDLsByIdResult, false),
		"UpdateTasks":        kitex.NewMethodInfo(updateTasksHandler, newAgentServiceUpdateTasksArgs, newAgentServiceUpdateTasksResult, false),
		"GenerateCode":       kitex.NewMethodInfo(generateCodeHandler, newAgentServiceGenerateCodeArgs, newAgentServiceGenerateCodeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "agent",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func addRepositoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceAddRepositoryArgs)
	realResult := result.(*agent.AgentServiceAddRepositoryResult)
	success, err := handler.(agent.AgentService).AddRepository(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceAddRepositoryArgs() interface{} {
	return agent.NewAgentServiceAddRepositoryArgs()
}

func newAgentServiceAddRepositoryResult() interface{} {
	return agent.NewAgentServiceAddRepositoryResult()
}

func deleteRepositoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceDeleteRepositoriesArgs)
	realResult := result.(*agent.AgentServiceDeleteRepositoriesResult)
	success, err := handler.(agent.AgentService).DeleteRepositories(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceDeleteRepositoriesArgs() interface{} {
	return agent.NewAgentServiceDeleteRepositoriesArgs()
}

func newAgentServiceDeleteRepositoriesResult() interface{} {
	return agent.NewAgentServiceDeleteRepositoriesResult()
}

func updateRepositoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceUpdateRepositoryArgs)
	realResult := result.(*agent.AgentServiceUpdateRepositoryResult)
	success, err := handler.(agent.AgentService).UpdateRepository(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceUpdateRepositoryArgs() interface{} {
	return agent.NewAgentServiceUpdateRepositoryArgs()
}

func newAgentServiceUpdateRepositoryResult() interface{} {
	return agent.NewAgentServiceUpdateRepositoryResult()
}

func getRepositoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceGetRepositoriesArgs)
	realResult := result.(*agent.AgentServiceGetRepositoriesResult)
	success, err := handler.(agent.AgentService).GetRepositories(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceGetRepositoriesArgs() interface{} {
	return agent.NewAgentServiceGetRepositoriesArgs()
}

func newAgentServiceGetRepositoriesResult() interface{} {
	return agent.NewAgentServiceGetRepositoriesResult()
}

func syncRepositoryByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceSyncRepositoryByIdArgs)
	realResult := result.(*agent.AgentServiceSyncRepositoryByIdResult)
	success, err := handler.(agent.AgentService).SyncRepositoryById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceSyncRepositoryByIdArgs() interface{} {
	return agent.NewAgentServiceSyncRepositoryByIdArgs()
}

func newAgentServiceSyncRepositoryByIdResult() interface{} {
	return agent.NewAgentServiceSyncRepositoryByIdResult()
}

func addIDLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceAddIDLArgs)
	realResult := result.(*agent.AgentServiceAddIDLResult)
	success, err := handler.(agent.AgentService).AddIDL(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceAddIDLArgs() interface{} {
	return agent.NewAgentServiceAddIDLArgs()
}

func newAgentServiceAddIDLResult() interface{} {
	return agent.NewAgentServiceAddIDLResult()
}

func deleteIDLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceDeleteIDLArgs)
	realResult := result.(*agent.AgentServiceDeleteIDLResult)
	success, err := handler.(agent.AgentService).DeleteIDL(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceDeleteIDLArgs() interface{} {
	return agent.NewAgentServiceDeleteIDLArgs()
}

func newAgentServiceDeleteIDLResult() interface{} {
	return agent.NewAgentServiceDeleteIDLResult()
}

func updateIDLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceUpdateIDLArgs)
	realResult := result.(*agent.AgentServiceUpdateIDLResult)
	success, err := handler.(agent.AgentService).UpdateIDL(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceUpdateIDLArgs() interface{} {
	return agent.NewAgentServiceUpdateIDLArgs()
}

func newAgentServiceUpdateIDLResult() interface{} {
	return agent.NewAgentServiceUpdateIDLResult()
}

func getIDLsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceGetIDLsArgs)
	realResult := result.(*agent.AgentServiceGetIDLsResult)
	success, err := handler.(agent.AgentService).GetIDLs(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceGetIDLsArgs() interface{} {
	return agent.NewAgentServiceGetIDLsArgs()
}

func newAgentServiceGetIDLsResult() interface{} {
	return agent.NewAgentServiceGetIDLsResult()
}

func syncIDLsByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceSyncIDLsByIdArgs)
	realResult := result.(*agent.AgentServiceSyncIDLsByIdResult)
	success, err := handler.(agent.AgentService).SyncIDLsById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceSyncIDLsByIdArgs() interface{} {
	return agent.NewAgentServiceSyncIDLsByIdArgs()
}

func newAgentServiceSyncIDLsByIdResult() interface{} {
	return agent.NewAgentServiceSyncIDLsByIdResult()
}

func updateTasksHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceUpdateTasksArgs)
	realResult := result.(*agent.AgentServiceUpdateTasksResult)
	success, err := handler.(agent.AgentService).UpdateTasks(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceUpdateTasksArgs() interface{} {
	return agent.NewAgentServiceUpdateTasksArgs()
}

func newAgentServiceUpdateTasksResult() interface{} {
	return agent.NewAgentServiceUpdateTasksResult()
}

func generateCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*agent.AgentServiceGenerateCodeArgs)
	realResult := result.(*agent.AgentServiceGenerateCodeResult)
	success, err := handler.(agent.AgentService).GenerateCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAgentServiceGenerateCodeArgs() interface{} {
	return agent.NewAgentServiceGenerateCodeArgs()
}

func newAgentServiceGenerateCodeResult() interface{} {
	return agent.NewAgentServiceGenerateCodeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddRepository(ctx context.Context, req *agent.AddRepositoryReq) (r *agent.AddRepositoryRes, err error) {
	var _args agent.AgentServiceAddRepositoryArgs
	_args.Req = req
	var _result agent.AgentServiceAddRepositoryResult
	if err = p.c.Call(ctx, "AddRepository", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRepositories(ctx context.Context, req *agent.DeleteRepositoriesReq) (r *agent.DeleteRepositoriesRes, err error) {
	var _args agent.AgentServiceDeleteRepositoriesArgs
	_args.Req = req
	var _result agent.AgentServiceDeleteRepositoriesResult
	if err = p.c.Call(ctx, "DeleteRepositories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRepository(ctx context.Context, req *agent.UpdateRepositoryReq) (r *agent.UpdateRepositoryRes, err error) {
	var _args agent.AgentServiceUpdateRepositoryArgs
	_args.Req = req
	var _result agent.AgentServiceUpdateRepositoryResult
	if err = p.c.Call(ctx, "UpdateRepository", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRepositories(ctx context.Context, req *agent.GetRepositoriesReq) (r *agent.GetRepositoriesRes, err error) {
	var _args agent.AgentServiceGetRepositoriesArgs
	_args.Req = req
	var _result agent.AgentServiceGetRepositoriesResult
	if err = p.c.Call(ctx, "GetRepositories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncRepositoryById(ctx context.Context, req *agent.SyncRepositoryByIdReq) (r *agent.SyncRepositoryByIdRes, err error) {
	var _args agent.AgentServiceSyncRepositoryByIdArgs
	_args.Req = req
	var _result agent.AgentServiceSyncRepositoryByIdResult
	if err = p.c.Call(ctx, "SyncRepositoryById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddIDL(ctx context.Context, req *agent.AddIDLReq) (r *agent.AddIDLRes, err error) {
	var _args agent.AgentServiceAddIDLArgs
	_args.Req = req
	var _result agent.AgentServiceAddIDLResult
	if err = p.c.Call(ctx, "AddIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteIDL(ctx context.Context, req *agent.DeleteIDLsReq) (r *agent.DeleteIDLsRes, err error) {
	var _args agent.AgentServiceDeleteIDLArgs
	_args.Req = req
	var _result agent.AgentServiceDeleteIDLResult
	if err = p.c.Call(ctx, "DeleteIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateIDL(ctx context.Context, req *agent.UpdateIDLReq) (r *agent.UpdateIDLRes, err error) {
	var _args agent.AgentServiceUpdateIDLArgs
	_args.Req = req
	var _result agent.AgentServiceUpdateIDLResult
	if err = p.c.Call(ctx, "UpdateIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetIDLs(ctx context.Context, req *agent.GetIDLsReq) (r *agent.GetIDLsRes, err error) {
	var _args agent.AgentServiceGetIDLsArgs
	_args.Req = req
	var _result agent.AgentServiceGetIDLsResult
	if err = p.c.Call(ctx, "GetIDLs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncIDLsById(ctx context.Context, req *agent.SyncIDLsByIdReq) (r *agent.SyncIDLsByIdRes, err error) {
	var _args agent.AgentServiceSyncIDLsByIdArgs
	_args.Req = req
	var _result agent.AgentServiceSyncIDLsByIdResult
	if err = p.c.Call(ctx, "SyncIDLsById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTasks(ctx context.Context, req *agent.UpdateTasksReq) (r *agent.UpdateTasksRes, err error) {
	var _args agent.AgentServiceUpdateTasksArgs
	_args.Req = req
	var _result agent.AgentServiceUpdateTasksResult
	if err = p.c.Call(ctx, "UpdateTasks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GenerateCode(ctx context.Context, req *agent.GenerateCodeReq) (r *agent.GenerateCodeRes, err error) {
	var _args agent.AgentServiceGenerateCodeArgs
	_args.Req = req
	var _result agent.AgentServiceGenerateCodeResult
	if err = p.c.Call(ctx, "GenerateCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
