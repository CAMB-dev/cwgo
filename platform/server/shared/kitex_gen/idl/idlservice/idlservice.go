// Code generated by Kitex v0.6.1. DO NOT EDIT.

package idlservice

import (
	"context"
	idl "github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/idl"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return idlServiceServiceInfo
}

var idlServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "IdlService"
	handlerType := (*idl.IdlService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddIDL":    kitex.NewMethodInfo(addIDLHandler, newIdlServiceAddIDLArgs, newIdlServiceAddIDLResult, false),
		"DeleteIDL": kitex.NewMethodInfo(deleteIDLHandler, newIdlServiceDeleteIDLArgs, newIdlServiceDeleteIDLResult, false),
		"UpdateIDL": kitex.NewMethodInfo(updateIDLHandler, newIdlServiceUpdateIDLArgs, newIdlServiceUpdateIDLResult, false),
		"GetIDLs":   kitex.NewMethodInfo(getIDLsHandler, newIdlServiceGetIDLsArgs, newIdlServiceGetIDLsResult, false),
		"SyncIDLs":  kitex.NewMethodInfo(syncIDLsHandler, newIdlServiceSyncIDLsArgs, newIdlServiceSyncIDLsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "idl",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func addIDLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*idl.IdlServiceAddIDLArgs)
	realResult := result.(*idl.IdlServiceAddIDLResult)
	success, err := handler.(idl.IdlService).AddIDL(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIdlServiceAddIDLArgs() interface{} {
	return idl.NewIdlServiceAddIDLArgs()
}

func newIdlServiceAddIDLResult() interface{} {
	return idl.NewIdlServiceAddIDLResult()
}

func deleteIDLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*idl.IdlServiceDeleteIDLArgs)
	realResult := result.(*idl.IdlServiceDeleteIDLResult)
	success, err := handler.(idl.IdlService).DeleteIDL(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIdlServiceDeleteIDLArgs() interface{} {
	return idl.NewIdlServiceDeleteIDLArgs()
}

func newIdlServiceDeleteIDLResult() interface{} {
	return idl.NewIdlServiceDeleteIDLResult()
}

func updateIDLHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*idl.IdlServiceUpdateIDLArgs)
	realResult := result.(*idl.IdlServiceUpdateIDLResult)
	success, err := handler.(idl.IdlService).UpdateIDL(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIdlServiceUpdateIDLArgs() interface{} {
	return idl.NewIdlServiceUpdateIDLArgs()
}

func newIdlServiceUpdateIDLResult() interface{} {
	return idl.NewIdlServiceUpdateIDLResult()
}

func getIDLsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*idl.IdlServiceGetIDLsArgs)
	realResult := result.(*idl.IdlServiceGetIDLsResult)
	success, err := handler.(idl.IdlService).GetIDLs(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIdlServiceGetIDLsArgs() interface{} {
	return idl.NewIdlServiceGetIDLsArgs()
}

func newIdlServiceGetIDLsResult() interface{} {
	return idl.NewIdlServiceGetIDLsResult()
}

func syncIDLsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*idl.IdlServiceSyncIDLsArgs)
	realResult := result.(*idl.IdlServiceSyncIDLsResult)
	success, err := handler.(idl.IdlService).SyncIDLs(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIdlServiceSyncIDLsArgs() interface{} {
	return idl.NewIdlServiceSyncIDLsArgs()
}

func newIdlServiceSyncIDLsResult() interface{} {
	return idl.NewIdlServiceSyncIDLsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddIDL(ctx context.Context, req *idl.AddIDLReq) (r *idl.AddIDLRes, err error) {
	var _args idl.IdlServiceAddIDLArgs
	_args.Req = req
	var _result idl.IdlServiceAddIDLResult
	if err = p.c.Call(ctx, "AddIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteIDL(ctx context.Context, req *idl.DeleteIDLsReq) (r *idl.DeleteIDLsRes, err error) {
	var _args idl.IdlServiceDeleteIDLArgs
	_args.Req = req
	var _result idl.IdlServiceDeleteIDLResult
	if err = p.c.Call(ctx, "DeleteIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateIDL(ctx context.Context, req *idl.UpdateIDLReq) (r *idl.UpdateIDLRes, err error) {
	var _args idl.IdlServiceUpdateIDLArgs
	_args.Req = req
	var _result idl.IdlServiceUpdateIDLResult
	if err = p.c.Call(ctx, "UpdateIDL", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetIDLs(ctx context.Context, req *idl.GetIDLsReq) (r *idl.GetIDLsRes, err error) {
	var _args idl.IdlServiceGetIDLsArgs
	_args.Req = req
	var _result idl.IdlServiceGetIDLsResult
	if err = p.c.Call(ctx, "GetIDLs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncIDLs(ctx context.Context, req *idl.SyncIDLsByIdReq) (r *idl.SyncIDLsByIdRes, err error) {
	var _args idl.IdlServiceSyncIDLsArgs
	_args.Req = req
	var _result idl.IdlServiceSyncIDLsResult
	if err = p.c.Call(ctx, "SyncIDLs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
