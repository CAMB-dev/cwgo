/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gitlab

import (
	"fmt"
	"github.com/cloudwego/cwgo/platform/server/shared/config"
	"github.com/cloudwego/cwgo/platform/server/shared/utils"
	"io/ioutil"
	"os"
	"os/exec"
)

func AddIDL(repoID int64, idlPath, serviceName string) error {
	idlPid, owner, repoName, err := utils.ParseIdlURL(idlPath)
	if err != nil {
		return err
	}

	// Create temp dir
	tempDir, err := ioutil.TempDir("", "temp_gitlab_cwgo")
	if err != nil {
		return err
	}
	defer os.RemoveAll(tempDir)

	// Pulling Thrift files from the GitLab repository to a temporary folder
	ref := MainRef
	file, err := gl.GetFile(owner, repoName, idlPid, ref)
	if err != nil {
		return err
	}

	// Create a thrift file in a temporary folder
	filePathOnDisk := fmt.Sprintf("%s/%s", tempDir, file.Name)
	if err := ioutil.WriteFile(filePathOnDisk, file.Content, 0644); err != nil {
		return err
	}

	cwgoCmd := exec.Command("cwgo", "client",
		"--idl", file.Name,
		"--type", "rpc",
		"--service", serviceName,
		"--module", serviceName)
	cwgoCmd.Dir = tempDir

	if err := cwgoCmd.Run(); err != nil {
		return err
	}

	fileContentMap := make(map[string][]byte)
	if err := utils.ProcessFolders(fileContentMap, tempDir, "kitex_gen", "rpc"); err != nil {
		return err
	}

	err = gl.PushFilesToRepository(fileContentMap, owner, repoName, ref, "generated by cwgo")
	if err != nil {
		return err
	}

	err = config.GetManager().GetIdlManager().AddIDL(repoID, idlPath, serviceName)
	if err != nil {
		return err
	}

	return nil
}

func DeleteIDLs(ids []int64) error {
	//TODO: 数据库操作，删除idl记录
	return nil
}

func UpdateIDL(id, repoId int64, idlPath, serviceName string) error {
	//TODO: 数据库操作，更新idl数据
	return nil
}

func GetIDLs(limit, page int32) error {
	//TODO: 数据库操作，得到idl数据
	return nil
}

func SyncIDLs(ids []int64) error {
	//for _, v := range ids {
	//	//TODO: 数据库操作，得到idl的URL
	//	idlPath := ""
	//	idlPid, owner, repoName, err := utils.ParseIdlURL(idlPath)
	//	file, err := gl.GetFile(owner, repoName, idlPid, MainRef)
	//	if err != nil {
	//		return err
	//	}
	//	//TODO: 数据库存储file.content
	//
	//}

	return nil
}
