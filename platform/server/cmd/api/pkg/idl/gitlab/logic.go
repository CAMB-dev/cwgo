/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gitlab

import (
	"errors"
	"fmt"
	"github.com/cloudwego/cwgo/platform/server/shared/repository"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"
)

const (
	GitlabURLPrefix = "https://gitlab.com/"
	MainRef         = "main"
)

func AddIDL(repoID int64, idlPath string) error {
	var gl repository.GitLabApi
	token := "" //添加数据库操作

	err := gl.InitClient(token)
	if err != nil {
		return err
	}

	var tempPath string
	if strings.HasPrefix(idlPath, GitlabURLPrefix) {
		tempPath = idlPath[len(GitlabURLPrefix):]
		lastQuestionMarkIndex := strings.LastIndex(tempPath, "?")
		if lastQuestionMarkIndex != -1 {
			tempPath = tempPath[:lastQuestionMarkIndex]
		}
	} else {
		return errors.New("idlPath format wrong,do not have prefix:\"https://github.com/\"")
	}
	urlParts := strings.Split(tempPath, "/")
	if len(urlParts) < 5 {
		return errors.New("idlPath format wrong")
	}
	owner := urlParts[0]
	repoName := urlParts[1]
	idlPid := ""
	for i := 5; i < len(urlParts); i++ {
		idlPid = idlPid + "/" + urlParts[i]
	}
	idlPid = idlPid[1:]
	// Create temp dir
	tempDir, err := ioutil.TempDir("", "temp_gitlab_cwgo")
	if err != nil {
		return err
	}
	defer os.RemoveAll(tempDir)

	// Pulling Thrift files from the GitLab repository to a temporary folder
	ref := MainRef
	file, err := gl.GetFile(owner, repoName, idlPid, ref)
	if err != nil {
		return err
	}

	// Create a thrift file in a temporary folder
	filePathOnDisk := fmt.Sprintf("%s/%s", tempDir, file.Name)
	if err := ioutil.WriteFile(filePathOnDisk, file.Content, 0644); err != nil {
		return err
	}

	cwgoCmd := exec.Command("cwgo", "client",
		"--idl", file.Name,
		"--type", "rpc",
		"--service", "hello",
		"--module", "testCwgo")
	cwgoCmd.Dir = tempDir

	if err := cwgoCmd.Run(); err != nil {
		return err
	}

	filesM := make(map[string][]byte)
	if err := pushFilesToRepository(filesM, tempDir, "kitex_gen", "rpc"); err != nil {
		return err
	}

	err = gl.PushFilesToRepository(filesM, owner, repoName, ref, "generated by cwgo")
	if err != nil {
		return err
	}

	return nil
}

func pushFilesToRepository(filesM map[string][]byte, sourceDir string, folders ...string) error {
	for _, folder := range folders {
		// 递归处理文件夹
		if err := processFolder(filesM, sourceDir+"/"+folder, folder); err != nil {
			return err
		}
	}
	return nil
}

func processFolder(filesM map[string][]byte, folderPath, targetPath string) error {
	files, err := ioutil.ReadDir(folderPath)
	if err != nil {
		return err
	}

	for _, file := range files {
		if file.IsDir() {
			// process the subfolders
			subFolder := targetPath + "/" + file.Name()
			if err := processFolder(filesM, folderPath+"/"+file.Name(), subFolder); err != nil {
				return err
			}
		} else {
			// process the file
			filePath := folderPath + "/" + file.Name()
			content, err := ioutil.ReadFile(filePath)
			filesM[targetPath+"/"+file.Name()] = content
			if err != nil {
				return err
			}
		}
	}

	return nil
}
