/*
 *
 *  * Copyright 2022 CloudWeGo Authors
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *     http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *
 */

package service

import (
	"context"
	"fmt"
	"github.com/cloudwego/cwgo/platform/server/cmd/agent/internal/svc"
	"github.com/cloudwego/cwgo/platform/server/shared/consts"
	"github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/agent"
	"github.com/cloudwego/cwgo/platform/server/shared/utils"
	"io/ioutil"
	"os"
	"os/exec"
)

const (
	successMsgGenerateCode = "" // TODO: to be filled...
)

type GenerateCodeService struct {
	ctx    context.Context
	svcCtx *svc.ServiceContext
} // NewGenerateCodeService new GenerateCodeService
func NewGenerateCodeService(ctx context.Context, svcCtx *svc.ServiceContext) *GenerateCodeService {
	return &GenerateCodeService{
		ctx:    ctx,
		svcCtx: svcCtx,
	}
}

// Run create note info
func (s *GenerateCodeService) Run(req *agent.GenerateCodeReq) (resp *agent.GenerateCodeRes, err error) {
	// Finish your business logic.
	idl, err := s.svcCtx.DaoManager.Idl.GetIDL(req.IdlId)
	if err != nil {
		return nil, err
	}

	repo, err := s.svcCtx.DaoManager.Repository.GetRepository(idl.RepositoryId)
	if err != nil {
		return nil, err
	}

	switch repo.Type {
	case consts.GitLab:
		err := GenerateGitlab(s, repo.Id, repo.RepositoryUrl, idl.MainIdlPath, idl.ServiceName)
		if err != nil {
			resp.Code = 400
			resp.Msg = err.Error()
			return resp, err
		}

	case consts.Github:
		err := GenerateGithub(s, repo.Id, repo.RepositoryUrl, idl.MainIdlPath, idl.ServiceName)
		if err != nil {
			resp.Code = 400
			resp.Msg = err.Error()
			return resp, err
		}
	}
	resp.Code = 0
	resp.Msg = successMsgGenerateCode

	return resp, nil
}

func GenerateGitlab(s *GenerateCodeService, repoId int64, repoPath, idlPath, serviceName string) error {
	idlPid, owner, repoName, err := utils.ParseGitlabIdlURL(idlPath)
	if err != nil {
		return err
	}

	// Create temp dir
	tempDir, err := ioutil.TempDir("", "temp_gitlab_cwgo")
	if err != nil {
		return err
	}
	defer os.RemoveAll(tempDir)

	// Pulling Thrift files from the GitLab repository to a temporary folder
	ref := consts.MainRef
	file, err := s.svcCtx.RepoManager.GitLab.GetFile(repoId, owner, repoName, idlPid, ref)
	if err != nil {
		return err
	}

	// Create a thrift file in a temporary folder
	filePathOnDisk := fmt.Sprintf("%s/%s", tempDir, file.Name)
	if err := ioutil.WriteFile(filePathOnDisk, file.Content, 0644); err != nil {
		return err
	}

	cwgoCmd := exec.Command("cwgo", "client",
		"--idl", file.Name,
		"--type", "rpc",
		"--service", serviceName,
		"--module", serviceName)
	cwgoCmd.Dir = tempDir

	if err := cwgoCmd.Run(); err != nil {
		return err
	}

	fileContentMap := make(map[string][]byte)
	if err := utils.ProcessFolders(fileContentMap, tempDir, "kitex_gen", "rpc"); err != nil {
		return err
	}

	err = s.svcCtx.RepoManager.GitLab.PushFilesToRepository(fileContentMap, repoId, owner, repoPath, ref, "generated by cwgo")
	if err != nil {
		return err
	}

	return nil
}

func GenerateGithub(s *GenerateCodeService, repoId int64, repoPath, idlPath, serviceName string) error {
	idlPid, owner, repoName, err := utils.ParseGithubIdlURL(idlPath)
	if err != nil {
		return err
	}

	// Create temp dir
	tempDir, err := ioutil.TempDir("", "temp_gitlab_cwgo")
	if err != nil {
		return err
	}
	defer os.RemoveAll(tempDir)

	// Pulling Thrift files from the GitLab repository to a temporary folder
	ref := consts.MainRef
	file, err := s.svcCtx.RepoManager.GitHub.GetFile(repoId, owner, repoName, idlPid, ref)
	if err != nil {
		return err
	}

	// Create a thrift file in a temporary folder
	filePathOnDisk := fmt.Sprintf("%s/%s", tempDir, file.Name)
	if err := ioutil.WriteFile(filePathOnDisk, file.Content, 0644); err != nil {
		return err
	}

	cwgoCmd := exec.Command("cwgo", "client",
		"--idl", file.Name,
		"--type", "rpc",
		"--service", serviceName,
		"--module", serviceName)
	cwgoCmd.Dir = tempDir

	if err := cwgoCmd.Run(); err != nil {
		return err
	}

	fileContentMap := make(map[string][]byte)
	if err := utils.ProcessFolders(fileContentMap, tempDir, "kitex_gen", "rpc"); err != nil {
		return err
	}

	err = s.svcCtx.RepoManager.GitHub.PushFilesToRepository(fileContentMap, repoId, owner, repoPath, ref, "generated by cwgo")
	if err != nil {
		return err
	}

	return nil
}
